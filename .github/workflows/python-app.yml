# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:

    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 0
      COVERAGE_TOTAL: 0

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest
    - name: Generate coverage report
      run: |
        python -m pytest --cov=./ --cov-report=xml
    - name: Upload to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
      with:
       heroku_api_key: ${{secrets.HEROKU_API_KEY}}
       heroku_app_name: "chatbotstin" #Must be unique in Heroku
       heroku_email: "hon.za.podavka@gmail.com"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with: #test
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage/reports/
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage1.xml,./coverage.xml
        flags: unittests
        name: codecov-umbrella
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
    - name: pytester-cover
      id: pytester-cover
      uses: programmingwithalex/pytester-cover@v1.2.3
      with:
        pytest-root-dir: '.'
        cov-omit-list: 'test/*, temp/main3.py, temp/main4.py'
        cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
        cov-threshold-total: ${{ env.COVERAGE_TOTAL }}

    - name: Coverage single fail - new issue
      if: ${{ steps.pytester-cover.outputs.cov-threshold-single-fail == 'true' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Pytest coverage single falls below minimum ${{ env.COVERAGE_SINGLE }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: workflow-failed
        body: ${{ steps.pytester-cover.outputs.output-table }}

    - name: Coverage single fail - exit
      if: ${{ steps.pytester-cover.outputs.cov-threshold-single-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cover.outputs.cov-threshold-single-fail }}"
        exit 1
    - name: Coverage total fail - new issue
      if: ${{ steps.pytester-cover.outputs.cov-threshold-total-fail == 'true' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Pytest coverage total falls below minimum ${{ env.COVERAGE_TOTAL }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: workflow-failed
        body: ${{ steps.pytester-cover.outputs.output-table }}

    - name: Coverage total fail - exit
      if: ${{ steps.pytester-cover.outputs.cov-threshold-total-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cover.outputs.cov-threshold-total-fail }}"
        exit 1
#    - name: Commit pytest coverage table
#      uses: peter-evans/commit-comment@v1
#      with:
#        body: ${{ steps.pytester-cover.outputs.output-table }}
